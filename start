 #!/bin/bash
# check if any of the existent bins for K8055 exist
clear
which k8055cmd > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
k80="k8055cmd"
else
which k8055 > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
k80="k8055"
else
echo "Make sure you build k8055 module command from this git"
exit 1
fi
fi
which gnome-terminal > /dev/null 2>&1
      if [ "$?" -eq "0" ]; then
term="gnome-terminal"
else
which xterm > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
term="xterm"
else
which konsole > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
term="konsole"
else
echo "Unable to find a terminal emulator"
exit 1
fi
fi
fi
trap "tput cvvis; clear; stty $(stty -g)" EXIT

stty -echo -icanon time 2 || exit $?
# Quick check to see if K8055 is connected to computer
chk=$($k80 2>&1 | grep "Could not open")
if [[ ! -z "$chk" ]]
then
echo "K8055 board disconnected"
exit 1
fi

KEYS=""
clears () {
tput cuu1 
    tput el 
    tput cuu1
    tput el
    tput cuu1
    tput el
    tput cuu1 
    tput el 
    tput cuu1
    tput el
    tput cuu1
    tput el
}
#Setting analog & digital output values to nothing so script knows that just started
dlv=""
anv1=""
anv2=""
$k80 -d:0 -a1:0 -a2:0 > /dev/null 2>&1
oldstatedi="0"
prestatedi="0"
curstatedi="0"
oldstateai1="0"
prestateai1="0"
curstateai1="0"
oldstateai2="0"
prestateai2="0"
curstateai2="0"
oldstateao1="0"
prestateao1="0"
curstateao1="0"
oldstateao2="0"
prestateao2="0"
curstateao2="0"
oldstatedo="0"
prestatedo="0"
curstatedo="0"

menu () {
tput cvvis; stty $(stty -g)
clear
echo "Select which outputs you want to activate."
echo "------------------------------------------"
echo " 0 - Create a Rule                        "
echo " 1 - Activate Digital Output/s            "
echo " 2 - Activate Analog Outputs              "
echo " 3 - Exit                                 "
echo "------------------------------------------"
echo -ne "Select 1,2 or 3 : "
read -r inp

if [[ "$inp" == "1" ]]
then
echo ""
echo "----------------------------------------------------------------------"
echo "From 8 digital output ports select which port/s you want to activate ."
echo "Example 1 : 4  - to activate port 4"
echo "Example 2 : 1478 - to activate ports 1,4,7 & 8"
echo "Example 3 : 12345678 - to activate all ports"
echo ""
echo -ne "Activate Port/s : "
read -r dport
sport=$(cat out.txt | grep "\<$dport\>" | awk '{print$1}' | sed 's#do##g' )
if [[ -z $sport ]]
then
echo "unable to apply that specific port entry"
sleep 4
clear
 KEYS=""
stty -echo -icanon time 2 || exit $?
start
else
$k80 -d:$sport
dlv="$dport"
clear 
KEYS=""
stty -echo -icanon time 2 || exit $?
start
fi
elif [[ "$inp" == "2" ]]
then
echo ""
echo "-------------------------------------------------------------------------"
echo "From 2 analog output ports select which port/s you want to change value ."
echo " 1 - to change analog port 1 value"
echo " 2 - to change analog port 1 value"
echo ""
echo "Value must be between 0 and 255 where 0= off and 255= on"
echo ""
echo -ne "Choose Analog Port (1,2) : "
read -r aport
if [[ "$aport" == "1" ]]
then
echo ""
echo -ne "Write a value between 0 & 255 : "
read -r ap1v
$k80 -a1:$ap1v
anv1="$ap1v"
clear
 KEYS=""
stty -echo -icanon time 2 || exit $?
start
fi

if [[ "$aport" == "2" ]]
then
echo ""
echo -ne "Write a value between 0 & 255 : "
read -r ap2v
$k80 -a2:$ap2v
anv2="$ap2v"
clear
KEYS="" 
stty -echo -icanon time 2 || exit $?
start
else
clear 
KEYS=""
stty -echo -icanon time 2 || exit $?
start
fi


elif [[ "$inp" == "3" ]]
then
sleep 4
clear
 KEYS=""
stty -echo -icanon time 2 || exit $?
start
else
sleep 4
clear 
KEYS=""
stty -echo -icanon time 2 || exit $?
start
fi
}

execrules() {
nrules=$(cat rules.txt | wc -l)

for i in $(seq "$nrules")
do
rruleid=$(cat rules.txt | awk '{print$1}' | sed -n "${i}p")
rrulein=$(cat rules.txt | awk '{print$2}' | sed -n "${i}p")
rruleoi=$(cat rules.txt | awk '{print$3}' | sed -n "${i}p")
rruleon=$(cat rules.txt | awk '{print$4}' | sed -n "${i}p")
if [[ "$rruleid" == "id" ]]
then
varinp=$(cat inp.txt | grep "\<$rrulein\>" | awk '{print$1}' | sed 's#di##g')
if [[ "$rruleoi" == "od" ]]
then
varout=$(cat out.txt | grep "\<$rruleon\>" | awk '{print$1}' | sed 's#do##g')
di=$($k80 | sed -e 's/;/ /g' | awk '{print$2}')
a1=$($k80 | sed -e 's/;/ /g' | awk '{print$3}')
a2=$($k80 | sed -e 's/;/ /g' | awk '{print$4}')
if [[ "$di" == "$varinp" ]]
then
$k80 -d:$varout
fi
fi
fi

done

}
start () {
if [[ -f rules.txt ]]
then
execrules
fi
echo "-----------------------------------------------"
echo "| PRESS 1 to create a rule on k8055           |"
echo "----------------------------------------------|"
echo "| PRESS 2 to activate output ports manually   |"
echo "-----------------------------------------------"
echo "| PRESS 3 to quit                             |"
echo "-----------------------------------------------"
echo ""
while [ 1 ];do
if [[ -f rules.txt ]]
then
execrules
fi
while read -t 0 ; do
        read -s -r -d "" -N 1 -t 0.2 CHAR && KEYS="$KEYS$CHAR" || break
done
# run 8055 bin and check current values
di=$($k80 | sed -e 's/;/ /g' | awk '{print$2}')
dinp=$di
a1=$($k80 | sed -e 's/;/ /g' | awk '{print$3}')
a2=$($k80 | sed -e 's/;/ /g' | awk '{print$4}')
a=$(cat inp.txt | grep "\<di$dinp\>" | awk '{print$2}')
echo "Digital Input activated : $a"
echo "Analog Input 1 Value = $a1"
echo "Analog Input 2 Value = $a2"

# if a digital output is activated then show current ports
if [[ -z "$dlv" ]]
then
echo "Digital output ports activated : None"
else
echo "Digital output ports activated : $dlv"
fi

# Code for analog output ports
if [[ -z "$anv1" ]]
then
echo "Analog output port 1 value : None"
else
echo "Analog output port 1 value : $anv1"
fi
if [[ -z "$anv2" ]]
then
echo "Analog output port 2 value : None"
else
echo "Analog output port 1 value : $anv2"
fi
sleep 1
tput civis
tput cuu1
tput cuu1
tput cuu1
tput cuu1
tput cuu1
tput cuu1


    # If no keys to process, wait 0.05 seconds and retry.
    if [ ! -z "$KEYS" ]; then
   
    # Check the first (next) keypress in the buffer.
    case "$KEYS" in
      1) 
if [[ -f "create" ]]
then
$term -e "./create"
clear 
KEYS=""
start
else
echo "unable to find create script"
read -p "Press any key to continue"
clear
KEYS=""
start
fi
        ;;
      2) 
        menu
        ;;
      3)
tput cvvis; clear; stty $(stty -g)
        exit 1
        ;;
      *)
       KEYS=""
       start
    esac
fi
done

# start again
start
}
# start loop
start
